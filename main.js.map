{"version":3,"file":"main.js","mappings":"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","sources":["webpack://front/./src/js/Liker/Liker.js","webpack://front/./src/js/app.js","webpack://front/./src/js/Collapse/Collapse.js","webpack://front/./src/js/Callback-Chat/Modal.js"],"sourcesContent":["import './liker.css';\n\nexport default class Liker {\n  constructor(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n\n    this.container = container;\n  }\n\n  init() {\n    this.drawUi();\n    this.events();\n  }\n\n  drawUi() {\n    this.container.innerHTML = `\n      <div class=\"like-wrapper\">\n        <button type=\"button\" class=\"add-like\">Like</button>\n      </div>  \n        `;\n  }\n\n  events() {\n    const likeBtn = this.container.querySelector('.add-like');\n\n    likeBtn.addEventListener('click', () => this.addLike());\n  }\n\n  addLike() {\n    const like = document.createElement('div');\n    like.classList.add('like');\n    const randomTrajectory = Liker.getRandomTrajectory();\n\n    like.style.animation = `${randomTrajectory} 500ms ease-out`;\n\n    this.container.querySelector('.like-wrapper').appendChild(like);\n    like.addEventListener('animationend', () => like.parentNode.removeChild(like));\n  }\n\n  static getRandomTrajectory() {\n    const trajectories = ['like1', 'like2', 'like3', 'like4'];\n    const randomIndex = Math.floor(Math.random() * trajectories.length);\n    return trajectories[randomIndex];\n  }\n}\n","import Collapse from './Collapse/Collapse';\nimport Modal from './Callback-Chat/Modal';\nimport Liker from './Liker/Liker';\n\nconst collapse = new Collapse(document.getElementById('collapse-container'));\nconst modal = new Modal(document.getElementById('chat-container'));\nconst liker = new Liker(document.getElementById('liker-container'));\n\ncollapse.init();\nmodal.init();\nliker.init();\n","import './collapse.css';\n\nexport default class Collapse {\n  constructor(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n\n    this.container = container;\n  }\n\n  init() {\n    this.drawUi();\n    this.addEvents();\n  }\n\n  drawUi() {\n    this.container.innerHTML = `\n      <div class=\"collapse-wrapper\">\n        <button type=\"button\" class=\"show-collapse\">Collapse</button>\n        <div class=\"content-collapse\">Collapsible containers are interactive UI components that allow users to expand and collapse sections of content. This helps to keep the webpage organized and clutter-free, making it easier for users to find and focus on the information they're looking for.</div>\n      </div>\n      <span class=\"copy-collapse\">Copy</span>\n      `;\n  }\n\n  addEvents() {\n    const collapseBtn = this.container.querySelector('.show-collapse');\n    collapseBtn.addEventListener('click', () => this.container\n      .querySelector('.content-collapse')\n      .classList.toggle('content-collapse_visible'));\n  }\n}\n","import './modal.css';\n\nexport default class Modal {\n  constructor(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n\n    this.container = container;\n    this.errorContainer = null;\n    this.modal = null;\n    this.textEl = null;\n    this.submitButton = null;\n    this.openButton = null;\n    this.closeButton = null;\n  }\n\n  init() {\n    this.drawUi();\n    this.addEvents();\n  }\n\n  drawUi() {\n    this.container.innerHTML = `\n      <div id=\"modal\" class=\"modal\">\n        <div class=\"modal-wrapper\">\n          <div class=\"modal-content\">\n              <h2>Напишите нам</h2>\n              <textarea id=\"text\" class=\"text-modal\" placeholder=\"Writen your text here\"></textarea>\n              <button type=\"submit\" id=\"submit\" class=\"btn-modal\">Отправить</button>\n              <button type=\"button\" class=\"close-modal\">&times;</button>\n          </div>\n          <button type=\"button\" id=\"open-modal\" class=\"open-modal\">Написать</button>\n        </div>\n        <div class=\"error-container\"></div>\n      </div>\n    `;\n  }\n\n  addEvents() {\n    this.modal = this.container.querySelector('#modal');\n    this.textEl = this.container.querySelector('#text');\n    this.submitButton = this.container.querySelector('#submit');\n    this.openButton = this.container.querySelector('#open-modal');\n    this.closeButton = this.container.querySelector('.close-modal');\n    this.errorContainer = this.container.querySelector('.error-container');\n\n    this.submitButton.addEventListener('click', () => this.onSubmit());\n    this.openButton.addEventListener('click', () => this.showModal());\n    this.textEl.addEventListener('click', () => this.clearTextField());\n    this.closeButton.addEventListener('click', () => this.hideModal());\n  }\n\n  onSubmit() {\n    if (this.textEl.value) {\n      this.modal.style.display = 'none';\n    } else {\n      this.showError('Пожалуйста, введите ваш текст');\n    }\n  }\n\n  showModal() {\n    this.modal\n      .querySelector('.modal-content')\n      .classList.add('modal-content_visible');\n    this.openButton.classList.add('open-modal_click');\n  }\n\n  hideModal() {\n    this.modal\n      .querySelector('.modal-content')\n      .classList.remove('modal-content_visible');\n    this.openButton.classList.remove('open-modal_click');\n  }\n\n  clearTextField() {\n    this.textEl.value = '';\n    this.hideError();\n  }\n\n  showError(message) {\n    this.errorContainer.textContent = message;\n    this.errorContainer.style.display = 'block';\n  }\n\n  hideError() {\n    this.errorContainer.style.display = 'none';\n  }\n}\n"],"names":["Liker","constructor","container","HTMLElement","Error","this","init","drawUi","events","innerHTML","querySelector","addEventListener","addLike","like","document","createElement","classList","add","randomTrajectory","getRandomTrajectory","style","animation","appendChild","parentNode","removeChild","trajectories","Math","floor","random","length","collapse","addEvents","toggle","getElementById","modal","errorContainer","textEl","submitButton","openButton","closeButton","onSubmit","showModal","clearTextField","hideModal","value","display","showError","remove","hideError","message","textContent","liker"],"sourceRoot":""}